import{u as i,e as h,r as c,l as d,f as u,h as l,i as p}from"./index-906f0cf7.js";class y{constructor(t,e){this.url=t,this.token=e}async getAll(){const t=await fetch(this.url);if(!t.ok){const e=`Error: ${t.status}. ${t.statusText}`;throw new Error(e)}return t.json()}async get(t){return(await fetch(this.url+t)).json()}async create(t){return(await fetch(this.url,{method:"POST",body:JSON.stringify(t),headers:{Authorization:"Bearer "+this.token,"Content-Type":"application/json"}})).json()}async update(t,e){return(await fetch(this.url+t,{method:"PATCH",body:JSON.stringify(e),headers:{Authorization:"Bearer "+this.token,"Content-Type":"application/json"}})).json()}async delete(t){return(await fetch(this.url+t,{method:"DELETE",headers:{Authorization:"Bearer "+this.token,"Content-Type":"application/json"},body:JSON.stringify({id:t})})).ok}}class b extends y{constructor(t,e){super(t,e),this.url=t,this.token=e}async getAll(){const t=await fetch(`${this.url}nudibranch`);if(console.log(this.url),console.log(t),!t.ok){const a=`Error: ${t.status}. ${t.statusText}`;throw new Error(a)}return(await t.json()).items}async getNudibranch(t){const e=await fetch(`${this.url}id`);if(!e.ok){const n=`Error ${e.status}. ${e.statusText}`;throw new Error(n)}return await e.json()}async createNudibranch(t){return(await fetch(`${this.url}nudibranch`,{method:"POST",body:t,headers:{Authorization:"Bearer "+this.token}})).json()}async deleteNudibranchById(t){const e=await fetch(`${this.url}nudibranch/${t}`,{method:"DELETE",headers:{Authorization:"Bearer "+this.token}});if(console.log(e),console.log("delete"),!e.ok)throw new Error("Error Http: "+e.status+". "+e.statusText);return e.json()}async updateNudibranch(t){return(await fetch(this.url+"update/"+t.id,{method:"PATCH",body:JSON.stringify(t),headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.token}`}})).json()}async filter(t){const e=await fetch(this.url+t);if(!e.ok){const n=`Error: ${e.status}. ${e.statusText}`;throw new Error(n)}return e.json()}}function k(){const{nudibranchs:r}=i(s=>s.nudibranchs),{token:t}=i(s=>s.users),e=h(),a="http://localhost:4400/",n=c.useMemo(()=>new b(a,t),[t]);return{handleLoadNudibranchs:c.useCallback(async()=>{console.log("Handle Load");const s=await n.getAll();e(d(s))},[e,n]),handleCreateNudibranch:async s=>{console.log("Handle Create");const o=await n.createNudibranch(s);e(u(o))},handleDeleteNudibranch:async s=>{const o=await n.deleteNudibranchById(s);e(l(o.id))},handleUpdateNudibranch:async s=>{console.log("Handle Update");const o=await n.updateNudibranch(s);e(p(o))},nudibranchs:r,nudibranchRepo:n,url:a}}export{k as u};
